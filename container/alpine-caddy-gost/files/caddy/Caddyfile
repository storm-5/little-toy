# An optional global options block can be the very first thing in the file.
# It is used to set options that apply globally, or not to any one site in particular. 
# Inside, only global options can be set; you cannot use regular site directives in them.
#{
	# debug
	#http_port 80
	#https_port 443
	#auto_https disable_redirects
	#email {{EMAIL}}
	#log /var/log/caddy/access.log
#}

# Otherwise, the first line of the Caddyfile is always the address(es) of the site to serve.
# All directives and matchers must go in a site block. There is no global scope or inheritence across site blocks.
# If there is only one site block, its curly braces { } are optional.
# If multiple sites share the same definition, you can list all of them together. 
# eg: localhost:8080, example.com, www.example.com {...}
{{DOMAIN}} {
	# a matcher token immediately following the directive can limit that directive's scope. 
	# The matcher token can be one of these forms:
	# - * to match all requests (wildcard; default).
	# - /path start with a forward slash to match a request path.
	# - @name to specify a named matcher.
	# Matcher tokens are usually optional. If a matcher token is omitted, it is the same as a wildcard matcher (*).
	# To match on anything other than a path, define a named matcher and refer to it using @name, eg:
	# @postfoo {
	#	method POST
	#	path /foo/*
	#}
	# reverse_proxy @postfoo localhost:9000
	# If the matcher set consists of only one matcher, a one-liner syntax also works:
	# @post method POST
	# 	reverse_proxy @post localhost:6001
	# Path matching is an exact match by default; you must append a * for a fast prefix match.
	
	
	log /var/log/caddy/access.log
	root /usr/share/nginx/html  # root sets the path to the site root for just this file server instance, overriding any other. 
	gzip
	ext .html .htm .php
	push
	header /api Access-Control-Allow-Origin *

	forwardproxy {
		# If set, forwardproxy will not add user's IP to "Forwarded:" header.
		# WARNING: there are other side-channels in your browser, that you might want to eliminate, 
		# such as WebRTC, see here(https://www.ivpn.net/knowledgebase/158/My-IP-is-being-leaked-by-WebRTC-How-do-I-disable-it.html) how to disable it.
		# Default: no hiding; Forwarded: for="useraddress" will be sent out.
		hide_ip
		
		# If set, forwardproxy will not add Via header, and prevents simple way to detect proxy usage.
		# WARNING: there are other side-channels to determine this.
		# Default: no hiding; Header in form of Via: 2.0 caddy will be sent out.
		hide_via

		# Sets timeout (in seconds) to get full response for HTTP requests made by proxy on behalf of users 
		# (does not affect CONNECT-method requests).
		# Default: no timeout.
		response_timeout 60

		# Sets timeout (in seconds) for establishing TCP connection to target website. Affects all requests.
		# Default: 20 seconds.
		dial_timeout 30

		# Sets basic HTTP auth credentials. This property may be repeated multiple times. 
		# Note that this is different from Caddy's built-in basicauth directive. 
		# BE SURE TO CHECK THE NAME OF THE SITE THAT IS REQUESTING CREDENTIALS BEFORE YOU ENTER THEM.
		# Default: no authentication required.
		# basicauth {{FP_USER}} {{FP_PASS}}

		# Sets upstream proxy to route all forwardproxy requests through it. 
		# This setting does not affect non-forwardproxy requests nor requests with wrong credentials. 
		# Upstream is incompatible with acl and ports subdirectives.
		# Supported schemes to remote host: https.
		# Supported schemes to localhost: socks5, http, https (certificate check is ignored).
		# Default: no upstream proxy.
		upstream socks5://localhost:10800
		
		# Attempts to hide the fact that the site is a forward proxy. 
		# Proxy will no longer respond with "407 Proxy Authentication Required" if credentials are 
		# incorrect or absent, and will attempt to mimic a generic Caddy web server as if the forward proxy is not enabled.
		# Probing resistance works (and makes sense) only if basicauth is set up. 
		# To use your proxy with probe resistance, supply your basicauth credentials to your client configuration. 
		# If your proxy client(browser, operating system, browser extension, etc) allows you to preconfigure credentials, 
		# and sends credentials preemptively, you do not need secret link.
		# If your proxy client does not preemptively send credentials, you will have to visit your secret link in your browser 
		# to trigger the authentication. Make sure that specified domain name is visitable, does not contain uppercase characters, 
		# does not start with dot, etc. Only this address will trigger a 407 response, prompting browsers to request credentials 
		# from user and cache them for the rest of the session. Default: no probing resistance.
		# probe_resistance google.com
	}


	proxy /api/* localhost:9001 localhost:9002

	# websocket
	proxy /stream localhost:4430 {
		websocket
		transparent
	}
}